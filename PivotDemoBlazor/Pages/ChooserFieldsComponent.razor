@using PivotDemoBlazor.Data;


<DxWindow @ref=windowRef
          AllowResize="true"
          ShowCloseButton="true"
          CloseOnEscape="true"
          HeaderText="Field Chooser"
          FooterText="Footer"
          ShowFooter="true"
          Width="max(25vw, 250px)"
          MinWidth="300"
          MinHeight="200"
          MaxWidth="800"
          MaxHeight="500"
    @bind-Visible=windowVisible>
    <BodyContentTemplate>
        <div class="container-fluid">
            <div class="row">
                <div class="col-6">
                    <div class="mb-1 d-flex align-items-center gap-2">
                        <i class="oi oi-cog" />
                        All Fields
                    </div>
                    <DxListBox Data="@DataFields"
                               TextFieldName="@nameof(DataField.NameField)"
                               SelectionMode="ListBoxSelectionMode.Multiple"
                               ShowCheckboxes="true"
                               CssClass="w-100 mt-1 me-1 flex-grow-1 chi-220"
                               style="flex-basis: 240px"
                               Values="@Values"
                               ValuesChanged="@((IEnumerable<DataField> values) => ValuesChanged(values))">
                    </DxListBox>
                </div>
                <div class="col-6">
                    <div class="mb-1 d-flex align-items-center gap-2">
                        <i class="oi oi-cog" />
                        Column Fields
                    </div>
                    <div class="row mb-3 @heightColumn border">

                        <Dropzone Items="ColumnFields" TItem="DataField" Context="columnContext" AllowsDrag="(d)=>{return true;}">
                            <div style="margin: 0.5rem;border-radius: 25px;padding: 0.2rem;background: lightgray;">
                                @columnContext.NameField
                            </div>
                        </Dropzone>
                    </div>
                    <div class="mb-1 d-flex align-items-center gap-2">
                        <i class="oi oi-cog" />
                        Row Fields
                    </div>
                    <div class="row @heightRow border">

                        <Dropzone Items="RowFields" TItem="DataField" OnItemDrop="@((i)=> ItemDrop(i))" Context="rowContext" AllowsDrag="(d)=>{return true;}" InstantReplace="false">
                            <div style="margin: 0.5rem;border-radius: 25px;padding: 0.2rem;background: lightgray;">
                                @rowContext.NameField
                            </div>
                        </Dropzone>
                    </div>
                </div>
            </div>
        </div>


    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="OK" Click="()=>{RowList.InvokeAsync(ColumnFields); windowVisible = false;}" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@context.CloseCallback" />
    </FooterContentTemplate>
</DxWindow>

@code {
    [Parameter]
    public bool windowVisible { get; set; }
    [Parameter] 
    public MouseEventArgs MouseEvent { get; set; }
    [Parameter]
    public EventCallback<List<DataField>> RowList { get; set; }
    IEnumerable<DataField> DataFields;
    IEnumerable<DataField> Values { get; set; }
    List<DataField> ColumnFields { get; set; } = new List<DataField>();
    List<DataField> RowFields { get; set; } = new List<DataField>();
    DxWindow windowRef;
    string heightColumn = "h-25";
    string heightRow = "h-25";

    protected override async Task OnInitializedAsync()
    {
        GetFields();
        if(windowRef != null)
            await windowRef.ShowAtAsync(MouseEvent.ClientX, MouseEvent.ClientY);
    }
    void ItemDrop(DataField i)
    {
        heightRow = "h-auto";
        if (ColumnFields.Count() == 0)
        {
            heightColumn = "h-25";
            heightRow = "h-auto";
        }
        StateHasChanged();
    }
    void GetFields()
    {
        DataFields = new List<DataField>(){
            new DataField(){NameField = "Region" , Area = PivotGridFieldArea.Row  },
            new DataField(){NameField = "Country" , Area = PivotGridFieldArea.Row },
            new DataField(){NameField = "City" , Area = PivotGridFieldArea.Row },
            // new DataField(){NameField = "Date" , CaptionField = "Year", AreaField = "Column", GroupIntervalField = "Year" },
            // new DataField(){NameField = "Amount" , CaptionField = "Amount", AreaField = "Data", SummaryTypeField = "Sum" },
            // new DataField(){NameField = "OrderId" , CaptionField = "Count", AreaField = "Data", SummaryTypeField = "Count" }
        };
    }
    void SelectedItemsChanged(IEnumerable<DataField> values)
    {
        ColumnFields.Clear();
        ColumnFields.AddRange(values);
    }
    void ValuesChanged(IEnumerable<DataField> values)
    {
        Values = values;

        if (RowFields.Count() > 0)
        {
            if (RowFields.Any(r => !values.Contains(r)))
            {
                RowFields.RemoveAll(r => !values.Contains(r));
            }
        }
        ColumnFields.Clear();
        ColumnFields.AddRange(values.Where(v => !RowFields.Contains(v)));

        if (ColumnFields.Count() > 0)
        {
            heightColumn = "h-auto";
        }
        else if (ColumnFields.Count() == 0)
        {
            heightColumn = "h-25";
        }
        if (RowFields.Count() == 0)
        {
            heightRow = "h-25";
        }
        
    }
}
